use std::num::ParseIntError;
use std::str::FromStr;
macro_rules! generate_colors {
    ($($c:ident => $hex:expr),*) => {
        #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
        pub enum Color {
            $(
                $c,
            )*
            RGB([u8;3]),
            RGBA([u8;4]),
        }
        impl FromStr for Color {
            type Err = String;
            fn from_str(s: &str) -> Result<Color, Self::Err>{
                match s {
                    $(
                        stringify!($c) => Ok(Color::$c),
                    )*
                    _ => {
                        return Err("couldn't parse".to_string())
                    }
                }
            }
        }
    };
}
generate_colors!(
    AliceBlue => "F0F8FF",
    AntiqueWhite => "FAEBD7",
    Aqua => "00FFFF",
    Aquamarine => "7FFFD4",
    Azure => "F0FFFF",
    Beige => "F5F5DC",
    Bisque => "FFE4C4",
    Black => "000000",
    BlanchedAlmond => "FFEBCD",
    Blue => "0000FF",
    BlueViolet => "8A2BE2",
    Brown => "A52A2A",
    BurlyWood => "DEB887",
    CadetBlue => "5F9EA0",
    Chartruse => "7FFF00",
    Chocolate => "D2691E",
    Coral => "FF7F50",
    CornflowerBlue => "6495ED",
    Cornsilk => "FFF8DC",
    Crimson => "DC143C",
    Cyan => "00FFFF",
    DarkBlue => "00008B",
    DarkCyan => "008B8B",
    DarkGoldenRod => "B8860B",
    DarkGray => "A9A9A9",
    DarkGreen => "006400",
    DarkKhaki => "BDB76B",
    DarkMagenta => "8B008B",
    DarkOliveGreen => "556B2F",
    DarkOrange => "",
    DarkOrchid => "",
    DarkRed => "",
    DarkSalmon => "",
    DarkSeaGreen => "",
    DarkSlateBlue => "",
    DarkSlateGray => "",
    DarkSlateGrey => "",
    DarkTurquoise => "",
    DarkViolet => "",
    DeepPink => "",
    DeepSkyBlue => "",
    DimGray => "",
    DimGrey => "",
    DodgerBlue => "",
    FireBrick => "",
    FloralWhite => "",
    ForestGreen => "",
    Fuchsia => "",
    Gainsboro => "",
    GhostWhite => "",
    Gold => "",
    GoldenRod => "",
    Gray => "",
    Grey => "",
    Green => "",
    GreenYellow => "",
    HoneyDew => "",
    HotPink => "",
    IndianRed => "",
    Indigo => "",
    Ivory => "",
    Khaki => "",
    Lavender => "",
    LavenderBlush => "",
    LawnGreen => "",
    LemonChiffon => "",
    LightBlue => "",
    LightCoral => "",
    LightCyan => "",
    LightGoldenRodRellow => "",
    LightGray => "",
    LightGrey => "",
    LightGreen => "",
    LightPink => "",
    LightSalmon => "",
    LightSeaGreen => "",
    LightSkyBlue => "",
    LightSlateGray => "",
    LightSlateGrey => "",
    LightSteelBlue => "",
    LightYellow => "",
    Lime => "",
    LimeGreen => "",
    Linen => "",
    Magenta => "",
    Maroon => "",
    MediumAquaMarine => "",
    MediumBlue => "",
    MediumOrchid => "",
    MediumPurple => "",
    MediumSeaGreen => "",
    MediumSlateBlue => "",
    MediumSpringGreen => "",
    MediumTurquoise => "",
    MediumVioletRed => "",
    MidnightBlue => "",
    MintCream => "",
    MistyRose => "",
    Moccasin => "",
    NavajoWhite => "",
    Navy => "",
    OldLace => "",
    Olive => "",
    OliveDrab => "",
    Orange => "",
    OrangeRed => "",
    Orchid => "",
    PaleGoldenRod => "",
    PaleGreen => "",
    PaleRurquoise => "",
    PaleVioletRed => "",
    PapayaWhip => "",
    PeachPuff => "",
    Peru => "",
    Pink => "",
    Plum => "",
    PowderBlue => "",
    Purple => "",
    RebeccaPurple => "",
    Red => "FF0000",
    RosyBrown => "",
    RoyalBlue => "",
    SaddleBrown => "",
    Salmon => "",
    SandyBrown => "",
    SeaGreen => "",
    SeaShell => "",
    Sienna => "",
    Silver => "",
    SkyBlue => "",
    SlateBlue => "",
    SlateGray => "",
    SlateGrey => "",
    Snow => "",
    SpringGreen => "",
    SteelBlue => "",
    Tan => "",
    Teal => "",
    Thistle => "",
    Tomato => "",
    Turquoise => "",
    Violet => "",
    Wheat => "",
    White => "FFFFFF",
    WhiteSmoke => "",
    Yellow => "",
    YellowGreen => ""
);
